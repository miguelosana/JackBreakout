class BrickField{

	field int rows,columns,totalBricks,maxY,maxX,score;
	field Array bricks;
	field Brick currentBrick;
	field int ballX, ballY;

	constructor BrickField new(int _rows, int _columns){
			var int i,j,c;
			var Array brickRows;
			let rows = _rows;
			let columns = _columns;
			let totalBricks = (columns * rows);
			let bricks = Array.new(totalBricks);
			let i=0;
			let score=0;
			let maxY = ((rows * 25 ) +10);
			let maxX = ((columns * 50) + 10);
				let c =0;
			while(i < totalBricks){
				let j=0;
				while(j < rows){
					let  bricks[i] = Brick.new(c,j);
					let j = j +1;
					let i = i+1;
				}
				let c = c +1;
			}

		return this;
	}

	method void draw(){
		var int i,j;
		let i=0;
		while(i < totalBricks){
			let currentBrick = bricks[i];
			if(currentBrick = null){}
			else{
				do currentBrick.draw();
			}
			let i = i+1;
		}

	/*	do Output.moveCursor(1,50);
		do Output.printString("Score:");
		do Output.moveCursor(1,57);
		do Output.printInt(score);
	*/	
		return;
	}
	method void hitDetection(Ball ball){
	//optimize don't do naive while lloop
		var int i;
		var boolean isHit;
	var int xdiv,ydiv;
		let i =0;


//x/10 +y/10 = index
/*do Output.moveCursor(1, 50);
do Output.printInt(ball.getX());
do Output.moveCursor(1,55);
do Output.printInt(maxX);
*/
let ballX = (ball.getX() -5);
let ballY = (ball.getY() -5);
if((ballY < maxY)  & ( ballX < maxX)  ){
	let xdiv = Math.divide(ballX,50);
	let ydiv = Math.divide(ballY, 25);
	let i = (((xdiv*rows) + ydiv)-1) ;	
	do Output.moveCursor(1,40);
	do Output.printInt(i);
        do Output.moveCursor(1,45);
	do Output.printInt(xdiv);
	do Output.moveCursor(1,50);
	do Output.printInt(ydiv);
        do Output.moveCursor(1,55);
	do Output.printInt(ballX);	

let 	currentBrick = bricks[i];
if((currentBrick = null) | (i > totalBricks) ){}
else{
		let isHit = currentBrick.isHit();
		
		if(isHit){ //bounce the ball back
			//do Sys.wait(1000);
			let score = score +5;
//			do currentBrick.dispose();
//			let bricks[i] = null;
//			do Screen.clearScreen();
			if((ballX > currentBrick.getX1()) &(ballX < currentBrick.getX2()) )
			{
				do ball.toggleFalling();
			}
			if((ballY > currentBrick.getY1()) & (ballY < currentBrick.getY2())){
				do ball.toggleLeft();
			}
		}
		}
}
		return ;
	}


	method void dispose(){
		var int i,j;
		
		let i =0;
		while(i < totalBricks){
		let currentBrick = bricks[i];
			do currentBrick.dispose();
			let i = i +1;

		
		}
		do Memory.deAlloc(this);
		return;
	}
}

