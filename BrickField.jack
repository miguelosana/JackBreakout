class BrickField{

	field int rows,columns,totalBricks,maxY,maxX,score;
	field Array bricks;
	field Brick currentBrick;
	field int ballX, ballY;
	field int brickWidth,brickHeight,brickPadding,brickOffsetTop,brickOffsetLeft;

	constructor BrickField new(int _rows, int _columns,int _brickWidth, int _brickHeight, int _brickPadding, int _brickOffsetTop, int _brickOffsetLeft){
			var int i,j,c;
			var Array brickRows;
			let rows = _rows;
			let columns = _columns;
			let totalBricks = (columns * rows);
			let bricks = Array.new(totalBricks);
			let i=0;
			let score=0;
			let maxY = ((rows * 25 ) +10);
			let maxX = ((columns * 50) + 10);
				let c =0;
			do setBrickProperties(_brickWidth, _brickHeight, _brickPadding, _brickOffsetTop, _brickOffsetLeft);
			while(i < totalBricks){
				let j=0;
				while(j < rows){
					let  bricks[i] = Brick.new(c,j, brickWidth, brickHeight, brickPadding, brickOffsetTop, brickOffsetLeft);
					let j = j +1;
					let i = i+1;
				}
				let c = c +1;
			}

		return this;
	}

	method int getScore(){
		return score;
	}
	method void setBrickProperties(int _brickWidth, int _brickHeight, int _brickPadding, int _brickOffsetTop, int _brickOffsetLeft){
	
		let brickWidth = _brickWidth;
		let brickHeight = _brickHeight;
		let brickPadding = _brickPadding;
		let brickOffsetTop = _brickOffsetTop;
		let brickOffsetLeft = _brickOffsetLeft;
		return;
	}

	method void draw(){
		var int i,j;
		let i=0;
		while(i < totalBricks){
			let currentBrick = bricks[i];
			if(currentBrick = null){}
			else{
				do currentBrick.draw();
			}
			let i = i+1;
		}

		return;
	}
	method void hitDetection(Ball ball){
		var int i;
		var boolean isHit;
	var int xdiv,ydiv;
		let i =0;


/*
To see if brick is hit we first calculate the index of the brick array with the following formula
((ballX/(brickWidth+brickPadding))*rows)+(ballY/(brickHeight+brickPadding)) - 1
*/
let ballX = (ball.getX() -5);
let ballY = (ball.getY() -5);
if((ballY < maxY)  & ( ballX < maxX)  ){
	let xdiv = Math.divide(ballX,(brickWidth+brickPadding));
	let ydiv = Math.divide(ballY, (brickHeight+brickPadding));
	let i = (((xdiv*rows) + ydiv)-1) ;	

	let 	currentBrick = bricks[i];
	if((currentBrick = null) | (i > totalBricks) ){}
	else{
		let isHit = currentBrick.isHit();
		
		if(isHit){ //bounce the ball back
			let score = score +5;
			//ball is hitting top or bottom
			if((ballX > currentBrick.getX1()) &(ballX < currentBrick.getX2()) )
			{
				do ball.toggleFalling();
			}
			//ball is hitting the side
			if((ballY > currentBrick.getY1()) & (ballY < currentBrick.getY2())){
				do ball.toggleLeft();
			}
			}
		}
	}
		return ;
}


	method void dispose(){
		var int i,j;
		
		let i =0;
		while(i < totalBricks){
		let currentBrick = bricks[i];
			do currentBrick.dispose();
			let i = i +1;

		
		}
		do Memory.deAlloc(this);
		return;
	}
}

